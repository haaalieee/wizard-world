/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: BConnolly (https://sketchfab.com/BConnolly)
license: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
source: https://sketchfab.com/3d-models/isometric-game-wizard-866c271cb9164a5599882fd69c2e5f35
title: Isometric Game Wizard
*/
import * as THREE from "three";
import React, { useEffect, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useAnimations, useCursor } from "@react-three/drei";
import { useCallOut, useCallOutUpdate } from "../context/WizardContext";
import OverlayText from "./OverlayText";

export default function Autowizard({ v = new THREE.Vector3(), ...props }) {
  const { scene, animations } = useGLTF("/autowizard.gltf");
  const { ref, actions } = useAnimations(animations);
  const [active, setActive] = useState(false);
  const toggleCallOut = useCallOutUpdate();
  const zoom = useCallOut();
  
  /*--- Set cursor when hovered --*/
  useCursor(active);

  useEffect(() => {
    const action = actions["Take 001"];
    /*--- Clip only at idle animation --*/
    action.getClip().duration = 4.7;
    /*--- Play animation --*/
    action.play();
  }, [actions]);

  useFrame((state) => {
     /*--- Set camera view when click function is invoked on the object --*/
    state.camera.fov = THREE.MathUtils.lerp(
      state.camera.fov,
      zoom ? 25 : 90,
      0.05
    );

    state.camera.near = THREE.MathUtils.lerp(
      state.camera.near,
      zoom ? 31 : 5,
      0.05
    );

    state.camera.position.lerp(
      v.set(zoom ? 25 : 0, zoom ? 1 : 2, zoom ? 0 : 16),
      0.05
    );
    /*--- Update camera settings--*/
    state.camera.updateProjectionMatrix();
  });

  return (
    <>
      <OverlayText
        {...props}
        index={0}
        position={[-20, 2.8, 0.5]} 
        rotation={[0, Math.PI / 2, 0]}
      />
      <primitive
        object={scene}
        {...props}
        ref={ref}
        onClick={toggleCallOut}
        onPointerOver={() => setActive(true)}
        onPointerOut={() => setActive(false)}
      />
    </>
  );
}

useGLTF.preload("/autowizard.gltf");
